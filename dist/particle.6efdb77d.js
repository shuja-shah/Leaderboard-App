/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/particles.js":
/*!**************************!*\
  !*** ./src/particles.js ***!
  \**************************/
/***/ (() => {

eval("/* -----------------------------------------------\n/* Author : Vincent Garreau  - vincentgarreau.com\n/* MIT license: http://opensource.org/licenses/MIT\n/* Demo / Generator : vincentgarreau.com/particles.js\n/* GitHub : github.com/VincentGarreau/particles.js\n/* How to use? : Check the GitHub README\n/* v2.0.0\n/* ----------------------------------------------- */\n/*eslint-disable */\r\nconst pJS = function (tag_id, params) {\r\n  const canvas_el = document.querySelector(\r\n    `#${tag_id} > .particles-js-canvas-el`\r\n  );\r\n\r\n  /* particles.js variables with default values */\r\n  this.pJS = {\r\n    canvas: {\r\n      el: canvas_el,\r\n      w: canvas_el.offsetWidth,\r\n      h: canvas_el.offsetHeight,\r\n    },\r\n    particles: {\r\n      number: {\r\n        value: 400,\r\n        density: {\r\n          enable: true,\r\n          value_area: 800,\r\n        },\r\n      },\r\n      color: {\r\n        value: \"#fff\",\r\n      },\r\n      shape: {\r\n        type: \"circle\",\r\n        stroke: {\r\n          width: 0,\r\n          color: \"#ff0000\",\r\n        },\r\n        polygon: {\r\n          nb_sides: 5,\r\n        },\r\n        image: {\r\n          src: \"\",\r\n          width: 100,\r\n          height: 100,\r\n        },\r\n      },\r\n      opacity: {\r\n        value: 1,\r\n        random: false,\r\n        anim: {\r\n          enable: false,\r\n          speed: 2,\r\n          opacity_min: 0,\r\n          sync: false,\r\n        },\r\n      },\r\n      size: {\r\n        value: 20,\r\n        random: false,\r\n        anim: {\r\n          enable: false,\r\n          speed: 20,\r\n          size_min: 0,\r\n          sync: false,\r\n        },\r\n      },\r\n      line_linked: {\r\n        enable: true,\r\n        distance: 100,\r\n        color: \"#fff\",\r\n        opacity: 1,\r\n        width: 1,\r\n      },\r\n      move: {\r\n        enable: true,\r\n        speed: 2,\r\n        direction: \"none\",\r\n        random: false,\r\n        straight: false,\r\n        out_mode: \"out\",\r\n        bounce: false,\r\n        attract: {\r\n          enable: false,\r\n          rotateX: 3000,\r\n          rotateY: 3000,\r\n        },\r\n      },\r\n      array: [],\r\n    },\r\n    interactivity: {\r\n      detect_on: \"canvas\",\r\n      events: {\r\n        onhover: {\r\n          enable: true,\r\n          mode: \"grab\",\r\n        },\r\n        onclick: {\r\n          enable: true,\r\n          mode: \"push\",\r\n        },\r\n        resize: true,\r\n      },\r\n      modes: {\r\n        grab: {\r\n          distance: 100,\r\n          line_linked: {\r\n            opacity: 1,\r\n          },\r\n        },\r\n        bubble: {\r\n          distance: 200,\r\n          size: 80,\r\n          duration: 0.4,\r\n        },\r\n        repulse: {\r\n          distance: 200,\r\n          duration: 0.4,\r\n        },\r\n        push: {\r\n          particles_nb: 4,\r\n        },\r\n        remove: {\r\n          particles_nb: 2,\r\n        },\r\n      },\r\n      mouse: {},\r\n    },\r\n    retina_detect: false,\r\n    fn: {\r\n      interact: {},\r\n      modes: {},\r\n      vendors: {},\r\n    },\r\n    tmp: {},\r\n  };\r\n\r\n  const { pJS } = this;\r\n\r\n  /* params settings */\r\n  if (params) {\r\n    Object.deepExtend(pJS, params);\r\n  }\r\n\r\n  pJS.tmp.obj = {\r\n    size_value: pJS.particles.size.value,\r\n    size_anim_speed: pJS.particles.size.anim.speed,\r\n    move_speed: pJS.particles.move.speed,\r\n    line_linked_distance: pJS.particles.line_linked.distance,\r\n    line_linked_width: pJS.particles.line_linked.width,\r\n    mode_grab_distance: pJS.interactivity.modes.grab.distance,\r\n    mode_bubble_distance: pJS.interactivity.modes.bubble.distance,\r\n    mode_bubble_size: pJS.interactivity.modes.bubble.size,\r\n    mode_repulse_distance: pJS.interactivity.modes.repulse.distance,\r\n  };\r\n\r\n  pJS.fn.retinaInit = function () {\r\n    if (pJS.retina_detect && window.devicePixelRatio > 1) {\r\n      pJS.canvas.pxratio = window.devicePixelRatio;\r\n      pJS.tmp.retina = true;\r\n    } else {\r\n      pJS.canvas.pxratio = 1;\r\n      pJS.tmp.retina = false;\r\n    }\r\n\r\n    pJS.canvas.w = pJS.canvas.el.offsetWidth * pJS.canvas.pxratio;\r\n    pJS.canvas.h = pJS.canvas.el.offsetHeight * pJS.canvas.pxratio;\r\n\r\n    pJS.particles.size.value = pJS.tmp.obj.size_value * pJS.canvas.pxratio;\r\n    pJS.particles.size.anim.speed =\r\n      pJS.tmp.obj.size_anim_speed * pJS.canvas.pxratio;\r\n    pJS.particles.move.speed = pJS.tmp.obj.move_speed * pJS.canvas.pxratio;\r\n    pJS.particles.line_linked.distance =\r\n      pJS.tmp.obj.line_linked_distance * pJS.canvas.pxratio;\r\n    pJS.interactivity.modes.grab.distance =\r\n      pJS.tmp.obj.mode_grab_distance * pJS.canvas.pxratio;\r\n    pJS.interactivity.modes.bubble.distance =\r\n      pJS.tmp.obj.mode_bubble_distance * pJS.canvas.pxratio;\r\n    pJS.particles.line_linked.width =\r\n      pJS.tmp.obj.line_linked_width * pJS.canvas.pxratio;\r\n    pJS.interactivity.modes.bubble.size =\r\n      pJS.tmp.obj.mode_bubble_size * pJS.canvas.pxratio;\r\n    pJS.interactivity.modes.repulse.distance =\r\n      pJS.tmp.obj.mode_repulse_distance * pJS.canvas.pxratio;\r\n  };\r\n\r\n  /* ---------- pJS functions - canvas ------------ */\r\n\r\n  pJS.fn.canvasInit = function () {\r\n    pJS.canvas.ctx = pJS.canvas.el.getContext(\"2d\");\r\n  };\r\n\r\n  pJS.fn.canvasSize = function () {\r\n    pJS.canvas.el.width = pJS.canvas.w;\r\n    pJS.canvas.el.height = pJS.canvas.h;\r\n\r\n    if (pJS && pJS.interactivity.events.resize) {\r\n      window.addEventListener(\"resize\", () => {\r\n        pJS.canvas.w = pJS.canvas.el.offsetWidth;\r\n        pJS.canvas.h = pJS.canvas.el.offsetHeight;\r\n\r\n        /* resize canvas */\r\n        if (pJS.tmp.retina) {\r\n          pJS.canvas.w *= pJS.canvas.pxratio;\r\n          pJS.canvas.h *= pJS.canvas.pxratio;\r\n        }\r\n\r\n        pJS.canvas.el.width = pJS.canvas.w;\r\n        pJS.canvas.el.height = pJS.canvas.h;\r\n\r\n        /* repaint canvas on anim disabled */\r\n        if (!pJS.particles.move.enable) {\r\n          pJS.fn.particlesEmpty();\r\n          pJS.fn.particlesCreate();\r\n          pJS.fn.particlesDraw();\r\n          pJS.fn.vendors.densityAutoParticles();\r\n        }\r\n\r\n        /* density particles enabled */\r\n        pJS.fn.vendors.densityAutoParticles();\r\n      });\r\n    }\r\n  };\r\n\r\n  pJS.fn.canvasPaint = function () {\r\n    pJS.canvas.ctx.fillRect(0, 0, pJS.canvas.w, pJS.canvas.h);\r\n  };\r\n\r\n  pJS.fn.canvasClear = function () {\r\n    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);\r\n  };\r\n\r\n  /* --------- pJS functions - particles ----------- */\r\n\r\n  pJS.fn.particle = function (color, opacity, position) {\r\n    /* size */\r\n    this.radius =\r\n      (pJS.particles.size.random ? Math.random() : 1) *\r\n      pJS.particles.size.value;\r\n    if (pJS.particles.size.anim.enable) {\r\n      this.size_status = false;\r\n      this.vs = pJS.particles.size.anim.speed / 100;\r\n      if (!pJS.particles.size.anim.sync) {\r\n        this.vs *= Math.random();\r\n      }\r\n    }\r\n\r\n    /* position */\r\n    this.x = position ? position.x : Math.random() * pJS.canvas.w;\r\n    this.y = position ? position.y : Math.random() * pJS.canvas.h;\r\n\r\n    /* check position  - into the canvas */\r\n    if (this.x > pJS.canvas.w - this.radius * 2) this.x -= this.radius;\r\n    else if (this.x < this.radius * 2) this.x += this.radius;\r\n    if (this.y > pJS.canvas.h - this.radius * 2) this.y -= this.radius;\r\n    else if (this.y < this.radius * 2) this.y += this.radius;\r\n\r\n    /* check position - avoid overlap */\r\n    if (pJS.particles.move.bounce) {\r\n      pJS.fn.vendors.checkOverlap(this, position);\r\n    }\r\n\r\n    /* color */\r\n    this.color = {};\r\n    if (typeof color.value === \"object\") {\r\n      if (color.value instanceof Array) {\r\n        const color_selected =\r\n          color.value[\r\n            Math.floor(Math.random() * pJS.particles.color.value.length)\r\n          ];\r\n        this.color.rgb = hexToRgb(color_selected);\r\n      } else {\r\n        if (\r\n          color.value.r != undefined &&\r\n          color.value.g != undefined &&\r\n          color.value.b != undefined\r\n        ) {\r\n          this.color.rgb = {\r\n            r: color.value.r,\r\n            g: color.value.g,\r\n            b: color.value.b,\r\n          };\r\n        }\r\n        if (\r\n          color.value.h != undefined &&\r\n          color.value.s != undefined &&\r\n          color.value.l != undefined\r\n        ) {\r\n          this.color.hsl = {\r\n            h: color.value.h,\r\n            s: color.value.s,\r\n            l: color.value.l,\r\n          };\r\n        }\r\n      }\r\n    } else if (color.value == \"random\") {\r\n      this.color.rgb = {\r\n        r: Math.floor(Math.random() * (255 - 0 + 1)) + 0,\r\n        g: Math.floor(Math.random() * (255 - 0 + 1)) + 0,\r\n        b: Math.floor(Math.random() * (255 - 0 + 1)) + 0,\r\n      };\r\n    } else if (typeof color.value === \"string\") {\r\n      this.color = color;\r\n      this.color.rgb = hexToRgb(this.color.value);\r\n    }\r\n\r\n    /* opacity */\r\n    this.opacity =\r\n      (pJS.particles.opacity.random ? Math.random() : 1) *\r\n      pJS.particles.opacity.value;\r\n    if (pJS.particles.opacity.anim.enable) {\r\n      this.opacity_status = false;\r\n      this.vo = pJS.particles.opacity.anim.speed / 100;\r\n      if (!pJS.particles.opacity.anim.sync) {\r\n        this.vo *= Math.random();\r\n      }\r\n    }\r\n\r\n    /* animation - velocity for speed */\r\n    let velbase = {};\r\n    switch (pJS.particles.move.direction) {\r\n      case \"top\":\r\n        velbase = { x: 0, y: -1 };\r\n        break;\r\n      case \"top-right\":\r\n        velbase = { x: 0.5, y: -0.5 };\r\n        break;\r\n      case \"right\":\r\n        velbase = { x: 1, y: -0 };\r\n        break;\r\n      case \"bottom-right\":\r\n        velbase = { x: 0.5, y: 0.5 };\r\n        break;\r\n      case \"bottom\":\r\n        velbase = { x: 0, y: 1 };\r\n        break;\r\n      case \"bottom-left\":\r\n        velbase = { x: -0.5, y: 1 };\r\n        break;\r\n      case \"left\":\r\n        velbase = { x: -1, y: 0 };\r\n        break;\r\n      case \"top-left\":\r\n        velbase = { x: -0.5, y: -0.5 };\r\n        break;\r\n      default:\r\n        velbase = { x: 0, y: 0 };\r\n        break;\r\n    }\r\n\r\n    if (pJS.particles.move.straight) {\r\n      this.vx = velbase.x;\r\n      this.vy = velbase.y;\r\n      if (pJS.particles.move.random) {\r\n        this.vx *= Math.random();\r\n        this.vy *= Math.random();\r\n      }\r\n    } else {\r\n      this.vx = velbase.x + Math.random() - 0.5;\r\n      this.vy = velbase.y + Math.random() - 0.5;\r\n    }\r\n\r\n    // var theta = 2.0 * Math.PI * Math.random();\r\n    // this.vx = Math.cos(theta);\r\n    // this.vy = Math.sin(theta);\r\n\r\n    this.vx_i = this.vx;\r\n    this.vy_i = this.vy;\r\n\r\n    /* if shape is image */\r\n\r\n    const shape_type = pJS.particles.shape.type;\r\n    if (typeof shape_type === \"object\") {\r\n      if (shape_type instanceof Array) {\r\n        const shape_selected =\r\n          shape_type[Math.floor(Math.random() * shape_type.length)];\r\n        this.shape = shape_selected;\r\n      }\r\n    } else {\r\n      this.shape = shape_type;\r\n    }\r\n\r\n    if (this.shape == \"image\") {\r\n      const sh = pJS.particles.shape;\r\n      this.img = {\r\n        src: sh.image.src,\r\n        ratio: sh.image.width / sh.image.height,\r\n      };\r\n      if (!this.img.ratio) this.img.ratio = 1;\r\n      if (pJS.tmp.img_type == \"svg\" && pJS.tmp.source_svg != undefined) {\r\n        pJS.fn.vendors.createSvgImg(this);\r\n        if (pJS.tmp.pushing) {\r\n          this.img.loaded = false;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.particle.prototype.draw = function () {\r\n    const p = this;\r\n\r\n    if (p.radius_bubble != undefined) {\r\n      var radius = p.radius_bubble;\r\n    } else {\r\n      var { radius } = p;\r\n    }\r\n\r\n    if (p.opacity_bubble != undefined) {\r\n      var opacity = p.opacity_bubble;\r\n    } else {\r\n      var { opacity } = p;\r\n    }\r\n\r\n    if (p.color.rgb) {\r\n      var color_value = `rgba(${p.color.rgb.r},${p.color.rgb.g},${p.color.rgb.b},${opacity})`;\r\n    } else {\r\n      var color_value = `hsla(${p.color.hsl.h},${p.color.hsl.s}%,${p.color.hsl.l}%,${opacity})`;\r\n    }\r\n\r\n    pJS.canvas.ctx.fillStyle = color_value;\r\n    pJS.canvas.ctx.beginPath();\r\n\r\n    switch (p.shape) {\r\n      case \"circle\":\r\n        pJS.canvas.ctx.arc(p.x, p.y, radius, 0, Math.PI * 2, false);\r\n        break;\r\n\r\n      case \"edge\":\r\n        pJS.canvas.ctx.rect(p.x - radius, p.y - radius, radius * 2, radius * 2);\r\n        break;\r\n\r\n      case \"triangle\":\r\n        pJS.fn.vendors.drawShape(\r\n          pJS.canvas.ctx,\r\n          p.x - radius,\r\n          p.y + radius / 1.66,\r\n          radius * 2,\r\n          3,\r\n          2\r\n        );\r\n        break;\r\n\r\n      case \"polygon\":\r\n        pJS.fn.vendors.drawShape(\r\n          pJS.canvas.ctx,\r\n          p.x - radius / (pJS.particles.shape.polygon.nb_sides / 3.5), // startX\r\n          p.y - radius / (2.66 / 3.5), // startY\r\n          (radius * 2.66) / (pJS.particles.shape.polygon.nb_sides / 3), // sideLength\r\n          pJS.particles.shape.polygon.nb_sides, // sideCountNumerator\r\n          1 // sideCountDenominator\r\n        );\r\n        break;\r\n\r\n      case \"star\":\r\n        pJS.fn.vendors.drawShape(\r\n          pJS.canvas.ctx,\r\n          p.x - (radius * 2) / (pJS.particles.shape.polygon.nb_sides / 4), // startX\r\n          p.y - radius / ((2 * 2.66) / 3.5), // startY\r\n          (radius * 2 * 2.66) / (pJS.particles.shape.polygon.nb_sides / 3), // sideLength\r\n          pJS.particles.shape.polygon.nb_sides, // sideCountNumerator\r\n          2 // sideCountDenominator\r\n        );\r\n        break;\r\n\r\n      case \"image\":\r\n        function draw() {\r\n          pJS.canvas.ctx.drawImage(\r\n            img_obj,\r\n            p.x - radius,\r\n            p.y - radius,\r\n            radius * 2,\r\n            (radius * 2) / p.img.ratio\r\n          );\r\n        }\r\n\r\n        if (pJS.tmp.img_type == \"svg\") {\r\n          var img_obj = p.img.obj;\r\n        } else {\r\n          var { img_obj } = pJS.tmp;\r\n        }\r\n\r\n        if (img_obj) {\r\n          draw();\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    pJS.canvas.ctx.closePath();\r\n\r\n    if (pJS.particles.shape.stroke.width > 0) {\r\n      pJS.canvas.ctx.strokeStyle = pJS.particles.shape.stroke.color;\r\n      pJS.canvas.ctx.lineWidth = pJS.particles.shape.stroke.width;\r\n      pJS.canvas.ctx.stroke();\r\n    }\r\n\r\n    pJS.canvas.ctx.fill();\r\n  };\r\n\r\n  pJS.fn.particlesCreate = function () {\r\n    for (let i = 0; i < pJS.particles.number.value; i++) {\r\n      pJS.particles.array.push(\r\n        new pJS.fn.particle(pJS.particles.color, pJS.particles.opacity.value)\r\n      );\r\n    }\r\n  };\r\n\r\n  pJS.fn.particlesUpdate = function () {\r\n    for (let i = 0; i < pJS.particles.array.length; i++) {\r\n      /* the particle */\r\n      const p = pJS.particles.array[i];\r\n\r\n      // var d = ( dx = pJS.interactivity.mouse.click_pos_x - p.x ) * dx + ( dy = pJS.interactivity.mouse.click_pos_y - p.y ) * dy;\r\n      // var f = -BANG_SIZE / d;\r\n      // if ( d < BANG_SIZE ) {\r\n      //     var t = Math.atan2( dy, dx );\r\n      //     p.vx = f * Math.cos(t);\r\n      //     p.vy = f * Math.sin(t);\r\n      // }\r\n\r\n      /* move the particle */\r\n      if (pJS.particles.move.enable) {\r\n        const ms = pJS.particles.move.speed / 2;\r\n        p.x += p.vx * ms;\r\n        p.y += p.vy * ms;\r\n      }\r\n\r\n      /* change opacity status */\r\n      if (pJS.particles.opacity.anim.enable) {\r\n        if (p.opacity_status == true) {\r\n          if (p.opacity >= pJS.particles.opacity.value) {\r\n            p.opacity_status = false;\r\n          }\r\n          p.opacity += p.vo;\r\n        } else {\r\n          if (p.opacity <= pJS.particles.opacity.anim.opacity_min) {\r\n            p.opacity_status = true;\r\n          }\r\n          p.opacity -= p.vo;\r\n        }\r\n        if (p.opacity < 0) p.opacity = 0;\r\n      }\r\n\r\n      /* change size */\r\n      if (pJS.particles.size.anim.enable) {\r\n        if (p.size_status == true) {\r\n          if (p.radius >= pJS.particles.size.value) p.size_status = false;\r\n          p.radius += p.vs;\r\n        } else {\r\n          if (p.radius <= pJS.particles.size.anim.size_min) {\r\n            p.size_status = true;\r\n          }\r\n          p.radius -= p.vs;\r\n        }\r\n        if (p.radius < 0) p.radius = 0;\r\n      }\r\n\r\n      /* change particle position if it is out of canvas */\r\n      if (pJS.particles.move.out_mode == \"bounce\") {\r\n        var new_pos = {\r\n          x_left: p.radius,\r\n          x_right: pJS.canvas.w,\r\n          y_top: p.radius,\r\n          y_bottom: pJS.canvas.h,\r\n        };\r\n      } else {\r\n        var new_pos = {\r\n          x_left: -p.radius,\r\n          x_right: pJS.canvas.w + p.radius,\r\n          y_top: -p.radius,\r\n          y_bottom: pJS.canvas.h + p.radius,\r\n        };\r\n      }\r\n\r\n      if (p.x - p.radius > pJS.canvas.w) {\r\n        p.x = new_pos.x_left;\r\n        p.y = Math.random() * pJS.canvas.h;\r\n      } else if (p.x + p.radius < 0) {\r\n        p.x = new_pos.x_right;\r\n        p.y = Math.random() * pJS.canvas.h;\r\n      }\r\n      if (p.y - p.radius > pJS.canvas.h) {\r\n        p.y = new_pos.y_top;\r\n        p.x = Math.random() * pJS.canvas.w;\r\n      } else if (p.y + p.radius < 0) {\r\n        p.y = new_pos.y_bottom;\r\n        p.x = Math.random() * pJS.canvas.w;\r\n      }\r\n\r\n      /* out of canvas modes */\r\n      switch (pJS.particles.move.out_mode) {\r\n        case \"bounce\":\r\n          if (p.x + p.radius > pJS.canvas.w) p.vx = -p.vx;\r\n          else if (p.x - p.radius < 0) p.vx = -p.vx;\r\n          if (p.y + p.radius > pJS.canvas.h) p.vy = -p.vy;\r\n          else if (p.y - p.radius < 0) p.vy = -p.vy;\r\n          break;\r\n      }\r\n\r\n      /* events */\r\n      if (isInArray(\"grab\", pJS.interactivity.events.onhover.mode)) {\r\n        pJS.fn.modes.grabParticle(p);\r\n      }\r\n\r\n      if (\r\n        isInArray(\"bubble\", pJS.interactivity.events.onhover.mode) ||\r\n        isInArray(\"bubble\", pJS.interactivity.events.onclick.mode)\r\n      ) {\r\n        pJS.fn.modes.bubbleParticle(p);\r\n      }\r\n\r\n      if (\r\n        isInArray(\"repulse\", pJS.interactivity.events.onhover.mode) ||\r\n        isInArray(\"repulse\", pJS.interactivity.events.onclick.mode)\r\n      ) {\r\n        pJS.fn.modes.repulseParticle(p);\r\n      }\r\n\r\n      /* interaction auto between particles */\r\n      if (\r\n        pJS.particles.line_linked.enable ||\r\n        pJS.particles.move.attract.enable\r\n      ) {\r\n        for (let j = i + 1; j < pJS.particles.array.length; j++) {\r\n          const p2 = pJS.particles.array[j];\r\n\r\n          /* link particles */\r\n          if (pJS.particles.line_linked.enable) {\r\n            pJS.fn.interact.linkParticles(p, p2);\r\n          }\r\n\r\n          /* attract particles */\r\n          if (pJS.particles.move.attract.enable) {\r\n            pJS.fn.interact.attractParticles(p, p2);\r\n          }\r\n\r\n          /* bounce particles */\r\n          if (pJS.particles.move.bounce) {\r\n            pJS.fn.interact.bounceParticles(p, p2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.particlesDraw = function () {\r\n    /* clear canvas */\r\n    pJS.canvas.ctx.clearRect(0, 0, pJS.canvas.w, pJS.canvas.h);\r\n\r\n    /* update each particles param */\r\n    pJS.fn.particlesUpdate();\r\n\r\n    /* draw each particle */\r\n    for (let i = 0; i < pJS.particles.array.length; i++) {\r\n      const p = pJS.particles.array[i];\r\n      p.draw();\r\n    }\r\n  };\r\n\r\n  pJS.fn.particlesEmpty = function () {\r\n    pJS.particles.array = [];\r\n  };\r\n\r\n  pJS.fn.particlesRefresh = function () {\r\n    /* init all */\r\n    cancelRequestAnimFrame(pJS.fn.checkAnimFrame);\r\n    cancelRequestAnimFrame(pJS.fn.drawAnimFrame);\r\n    pJS.tmp.source_svg = undefined;\r\n    pJS.tmp.img_obj = undefined;\r\n    pJS.tmp.count_svg = 0;\r\n    pJS.fn.particlesEmpty();\r\n    pJS.fn.canvasClear();\r\n\r\n    /* restart */\r\n    pJS.fn.vendors.start();\r\n  };\r\n\r\n  /* ---------- pJS functions - particles interaction ------------ */\r\n\r\n  pJS.fn.interact.linkParticles = function (p1, p2) {\r\n    const dx = p1.x - p2.x;\r\n    const dy = p1.y - p2.y;\r\n    const dist = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    /* draw a line between p1 and p2 if the distance between them is under the config distance */\r\n    if (dist <= pJS.particles.line_linked.distance) {\r\n      const opacity_line =\r\n        pJS.particles.line_linked.opacity -\r\n        dist /\r\n          (1 / pJS.particles.line_linked.opacity) /\r\n          pJS.particles.line_linked.distance;\r\n\r\n      if (opacity_line > 0) {\r\n        /* style */\r\n        const color_line = pJS.particles.line_linked.color_rgb_line;\r\n        pJS.canvas.ctx.strokeStyle = `rgba(${color_line.r},${color_line.g},${color_line.b},${opacity_line})`;\r\n        pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;\r\n        // pJS.canvas.ctx.lineCap = 'round'; /* performance issue */\r\n\r\n        /* path */\r\n        pJS.canvas.ctx.beginPath();\r\n        pJS.canvas.ctx.moveTo(p1.x, p1.y);\r\n        pJS.canvas.ctx.lineTo(p2.x, p2.y);\r\n        pJS.canvas.ctx.stroke();\r\n        pJS.canvas.ctx.closePath();\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.interact.attractParticles = function (p1, p2) {\r\n    /* condensed particles */\r\n    const dx = p1.x - p2.x;\r\n    const dy = p1.y - p2.y;\r\n    const dist = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (dist <= pJS.particles.line_linked.distance) {\r\n      const ax = dx / (pJS.particles.move.attract.rotateX * 1000);\r\n      const ay = dy / (pJS.particles.move.attract.rotateY * 1000);\r\n\r\n      p1.vx -= ax;\r\n      p1.vy -= ay;\r\n\r\n      p2.vx += ax;\r\n      p2.vy += ay;\r\n    }\r\n  };\r\n\r\n  pJS.fn.interact.bounceParticles = function (p1, p2) {\r\n    const dx = p1.x - p2.x;\r\n    const dy = p1.y - p2.y;\r\n    const dist = Math.sqrt(dx * dx + dy * dy);\r\n    const dist_p = p1.radius + p2.radius;\r\n\r\n    if (dist <= dist_p) {\r\n      p1.vx = -p1.vx;\r\n      p1.vy = -p1.vy;\r\n\r\n      p2.vx = -p2.vx;\r\n      p2.vy = -p2.vy;\r\n    }\r\n  };\r\n\r\n  /* ---------- pJS functions - modes events ------------ */\r\n\r\n  pJS.fn.modes.pushParticles = function (nb, pos) {\r\n    pJS.tmp.pushing = true;\r\n\r\n    for (let i = 0; i < nb; i++) {\r\n      pJS.particles.array.push(\r\n        new pJS.fn.particle(pJS.particles.color, pJS.particles.opacity.value, {\r\n          x: pos ? pos.pos_x : Math.random() * pJS.canvas.w,\r\n          y: pos ? pos.pos_y : Math.random() * pJS.canvas.h,\r\n        })\r\n      );\r\n      if (i == nb - 1) {\r\n        if (!pJS.particles.move.enable) {\r\n          pJS.fn.particlesDraw();\r\n        }\r\n        pJS.tmp.pushing = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.modes.removeParticles = function (nb) {\r\n    pJS.particles.array.splice(0, nb);\r\n    if (!pJS.particles.move.enable) {\r\n      pJS.fn.particlesDraw();\r\n    }\r\n  };\r\n\r\n  pJS.fn.modes.bubbleParticle = function (p) {\r\n    /* on hover event */\r\n    if (\r\n      pJS.interactivity.events.onhover.enable &&\r\n      isInArray(\"bubble\", pJS.interactivity.events.onhover.mode)\r\n    ) {\r\n      var dx_mouse = p.x - pJS.interactivity.mouse.pos_x;\r\n      var dy_mouse = p.y - pJS.interactivity.mouse.pos_y;\r\n      var dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n      const ratio = 1 - dist_mouse / pJS.interactivity.modes.bubble.distance;\r\n\r\n      function init() {\r\n        p.opacity_bubble = p.opacity;\r\n        p.radius_bubble = p.radius;\r\n      }\r\n\r\n      /* mousemove - check ratio */\r\n      if (dist_mouse <= pJS.interactivity.modes.bubble.distance) {\r\n        if (ratio >= 0 && pJS.interactivity.status == \"mousemove\") {\r\n          /* size */\r\n          if (pJS.interactivity.modes.bubble.size != pJS.particles.size.value) {\r\n            if (\r\n              pJS.interactivity.modes.bubble.size > pJS.particles.size.value\r\n            ) {\r\n              var size = p.radius + pJS.interactivity.modes.bubble.size * ratio;\r\n              if (size >= 0) {\r\n                p.radius_bubble = size;\r\n              }\r\n            } else {\r\n              const dif = p.radius - pJS.interactivity.modes.bubble.size;\r\n              var size = p.radius - dif * ratio;\r\n              if (size > 0) {\r\n                p.radius_bubble = size;\r\n              } else {\r\n                p.radius_bubble = 0;\r\n              }\r\n            }\r\n          }\r\n\r\n          /* opacity */\r\n          if (\r\n            pJS.interactivity.modes.bubble.opacity !=\r\n            pJS.particles.opacity.value\r\n          ) {\r\n            if (\r\n              pJS.interactivity.modes.bubble.opacity >\r\n              pJS.particles.opacity.value\r\n            ) {\r\n              var opacity = pJS.interactivity.modes.bubble.opacity * ratio;\r\n              if (\r\n                opacity > p.opacity &&\r\n                opacity <= pJS.interactivity.modes.bubble.opacity\r\n              ) {\r\n                p.opacity_bubble = opacity;\r\n              }\r\n            } else {\r\n              var opacity =\r\n                p.opacity -\r\n                (pJS.particles.opacity.value -\r\n                  pJS.interactivity.modes.bubble.opacity) *\r\n                  ratio;\r\n              if (\r\n                opacity < p.opacity &&\r\n                opacity >= pJS.interactivity.modes.bubble.opacity\r\n              ) {\r\n                p.opacity_bubble = opacity;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        init();\r\n      }\r\n\r\n      /* mouseleave */\r\n      if (pJS.interactivity.status == \"mouseleave\") {\r\n        init();\r\n      }\r\n    } else if (\r\n      /* on click event */\r\n      pJS.interactivity.events.onclick.enable &&\r\n      isInArray(\"bubble\", pJS.interactivity.events.onclick.mode)\r\n    ) {\r\n      if (pJS.tmp.bubble_clicking) {\r\n        var dx_mouse = p.x - pJS.interactivity.mouse.click_pos_x;\r\n        var dy_mouse = p.y - pJS.interactivity.mouse.click_pos_y;\r\n        var dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n        var time_spent =\r\n          (new Date().getTime() - pJS.interactivity.mouse.click_time) / 1000;\r\n\r\n        if (time_spent > pJS.interactivity.modes.bubble.duration) {\r\n          pJS.tmp.bubble_duration_end = true;\r\n        }\r\n\r\n        if (time_spent > pJS.interactivity.modes.bubble.duration * 2) {\r\n          pJS.tmp.bubble_clicking = false;\r\n          pJS.tmp.bubble_duration_end = false;\r\n        }\r\n      }\r\n\r\n      function process(bubble_param, particles_param, p_obj_bubble, p_obj, id) {\r\n        if (bubble_param != particles_param) {\r\n          if (!pJS.tmp.bubble_duration_end) {\r\n            if (dist_mouse <= pJS.interactivity.modes.bubble.distance) {\r\n              if (p_obj_bubble != undefined) var obj = p_obj_bubble;\r\n              else var obj = p_obj;\r\n              if (obj != bubble_param) {\r\n                var value =\r\n                  p_obj -\r\n                  (time_spent * (p_obj - bubble_param)) /\r\n                    pJS.interactivity.modes.bubble.duration;\r\n                if (id == \"size\") p.radius_bubble = value;\r\n                if (id == \"opacity\") p.opacity_bubble = value;\r\n              }\r\n            } else {\r\n              if (id == \"size\") p.radius_bubble = undefined;\r\n              if (id == \"opacity\") p.opacity_bubble = undefined;\r\n            }\r\n          } else if (p_obj_bubble != undefined) {\r\n            const value_tmp =\r\n              p_obj -\r\n              (time_spent * (p_obj - bubble_param)) /\r\n                pJS.interactivity.modes.bubble.duration;\r\n            const dif = bubble_param - value_tmp;\r\n            value = bubble_param + dif;\r\n            if (id == \"size\") p.radius_bubble = value;\r\n            if (id == \"opacity\") p.opacity_bubble = value;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (pJS.tmp.bubble_clicking) {\r\n        /* size */\r\n        process(\r\n          pJS.interactivity.modes.bubble.size,\r\n          pJS.particles.size.value,\r\n          p.radius_bubble,\r\n          p.radius,\r\n          \"size\"\r\n        );\r\n        /* opacity */\r\n        process(\r\n          pJS.interactivity.modes.bubble.opacity,\r\n          pJS.particles.opacity.value,\r\n          p.opacity_bubble,\r\n          p.opacity,\r\n          \"opacity\"\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.modes.repulseParticle = function (p) {\r\n    if (\r\n      pJS.interactivity.events.onhover.enable &&\r\n      isInArray(\"repulse\", pJS.interactivity.events.onhover.mode) &&\r\n      pJS.interactivity.status == \"mousemove\"\r\n    ) {\r\n      const dx_mouse = p.x - pJS.interactivity.mouse.pos_x;\r\n      const dy_mouse = p.y - pJS.interactivity.mouse.pos_y;\r\n      const dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n\r\n      const normVec = { x: dx_mouse / dist_mouse, y: dy_mouse / dist_mouse };\r\n      var repulseRadius = pJS.interactivity.modes.repulse.distance;\r\n      const velocity = 100;\r\n      const repulseFactor = clamp(\r\n        (1 / repulseRadius) *\r\n          (-1 * Math.pow(dist_mouse / repulseRadius, 2) + 1) *\r\n          repulseRadius *\r\n          velocity,\r\n        0,\r\n        50\r\n      );\r\n\r\n      const pos = {\r\n        x: p.x + normVec.x * repulseFactor,\r\n        y: p.y + normVec.y * repulseFactor,\r\n      };\r\n\r\n      if (pJS.particles.move.out_mode == \"bounce\") {\r\n        if (pos.x - p.radius > 0 && pos.x + p.radius < pJS.canvas.w) {\r\n          p.x = pos.x;\r\n        }\r\n        if (pos.y - p.radius > 0 && pos.y + p.radius < pJS.canvas.h) {\r\n          p.y = pos.y;\r\n        }\r\n      } else {\r\n        p.x = pos.x;\r\n        p.y = pos.y;\r\n      }\r\n    } else if (\r\n      pJS.interactivity.events.onclick.enable &&\r\n      isInArray(\"repulse\", pJS.interactivity.events.onclick.mode)\r\n    ) {\r\n      if (!pJS.tmp.repulse_finish) {\r\n        pJS.tmp.repulse_count++;\r\n        if (pJS.tmp.repulse_count == pJS.particles.array.length) {\r\n          pJS.tmp.repulse_finish = true;\r\n        }\r\n      }\r\n\r\n      if (pJS.tmp.repulse_clicking) {\r\n        var repulseRadius = Math.pow(\r\n          pJS.interactivity.modes.repulse.distance / 6,\r\n          3\r\n        );\r\n\r\n        const dx = pJS.interactivity.mouse.click_pos_x - p.x;\r\n        const dy = pJS.interactivity.mouse.click_pos_y - p.y;\r\n        const d = dx * dx + dy * dy;\r\n\r\n        const force = (-repulseRadius / d) * 1;\r\n\r\n        function process() {\r\n          const f = Math.atan2(dy, dx);\r\n          p.vx = force * Math.cos(f);\r\n          p.vy = force * Math.sin(f);\r\n\r\n          if (pJS.particles.move.out_mode == \"bounce\") {\r\n            const pos = {\r\n              x: p.x + p.vx,\r\n              y: p.y + p.vy,\r\n            };\r\n            if (pos.x + p.radius > pJS.canvas.w) p.vx = -p.vx;\r\n            else if (pos.x - p.radius < 0) p.vx = -p.vx;\r\n            if (pos.y + p.radius > pJS.canvas.h) p.vy = -p.vy;\r\n            else if (pos.y - p.radius < 0) p.vy = -p.vy;\r\n          }\r\n        }\r\n\r\n        // default\r\n        if (d <= repulseRadius) {\r\n          process();\r\n        }\r\n\r\n        // bang - slow motion mode\r\n        // if(!pJS.tmp.repulse_finish){\r\n        //   if(d <= repulseRadius){\r\n        //     process();\r\n        //   }\r\n        // }else{\r\n        //   process();\r\n        // }\r\n      } else if (pJS.tmp.repulse_clicking == false) {\r\n        p.vx = p.vx_i;\r\n        p.vy = p.vy_i;\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.modes.grabParticle = function (p) {\r\n    if (\r\n      pJS.interactivity.events.onhover.enable &&\r\n      pJS.interactivity.status == \"mousemove\"\r\n    ) {\r\n      const dx_mouse = p.x - pJS.interactivity.mouse.pos_x;\r\n      const dy_mouse = p.y - pJS.interactivity.mouse.pos_y;\r\n      const dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\r\n\r\n      /* draw a line between the cursor and the particle if the distance between them is under the config distance */\r\n      if (dist_mouse <= pJS.interactivity.modes.grab.distance) {\r\n        const opacity_line =\r\n          pJS.interactivity.modes.grab.line_linked.opacity -\r\n          dist_mouse /\r\n            (1 / pJS.interactivity.modes.grab.line_linked.opacity) /\r\n            pJS.interactivity.modes.grab.distance;\r\n\r\n        if (opacity_line > 0) {\r\n          /* style */\r\n          const color_line = pJS.particles.line_linked.color_rgb_line;\r\n          pJS.canvas.ctx.strokeStyle = `rgba(${color_line.r},${color_line.g},${color_line.b},${opacity_line})`;\r\n          pJS.canvas.ctx.lineWidth = pJS.particles.line_linked.width;\r\n          // pJS.canvas.ctx.lineCap = 'round'; /* performance issue */\r\n\r\n          /* path */\r\n          pJS.canvas.ctx.beginPath();\r\n          pJS.canvas.ctx.moveTo(p.x, p.y);\r\n          pJS.canvas.ctx.lineTo(\r\n            pJS.interactivity.mouse.pos_x,\r\n            pJS.interactivity.mouse.pos_y\r\n          );\r\n          pJS.canvas.ctx.stroke();\r\n          pJS.canvas.ctx.closePath();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /* ---------- pJS functions - vendors ------------ */\r\n\r\n  pJS.fn.vendors.eventsListeners = function () {\r\n    /* events target element */\r\n    if (pJS.interactivity.detect_on == \"window\") {\r\n      pJS.interactivity.el = window;\r\n    } else {\r\n      pJS.interactivity.el = pJS.canvas.el;\r\n    }\r\n\r\n    /* detect mouse pos - on hover / click event */\r\n    if (\r\n      pJS.interactivity.events.onhover.enable ||\r\n      pJS.interactivity.events.onclick.enable\r\n    ) {\r\n      /* el on mousemove */\r\n      pJS.interactivity.el.addEventListener(\"mousemove\", (e) => {\r\n        if (pJS.interactivity.el == window) {\r\n          var pos_x = e.clientX;\r\n          var pos_y = e.clientY;\r\n        } else {\r\n          var pos_x = e.offsetX || e.clientX;\r\n          var pos_y = e.offsetY || e.clientY;\r\n        }\r\n\r\n        pJS.interactivity.mouse.pos_x = pos_x;\r\n        pJS.interactivity.mouse.pos_y = pos_y;\r\n\r\n        if (pJS.tmp.retina) {\r\n          pJS.interactivity.mouse.pos_x *= pJS.canvas.pxratio;\r\n          pJS.interactivity.mouse.pos_y *= pJS.canvas.pxratio;\r\n        }\r\n\r\n        pJS.interactivity.status = \"mousemove\";\r\n      });\r\n\r\n      /* el on onmouseleave */\r\n      pJS.interactivity.el.addEventListener(\"mouseleave\", (e) => {\r\n        pJS.interactivity.mouse.pos_x = null;\r\n        pJS.interactivity.mouse.pos_y = null;\r\n        pJS.interactivity.status = \"mouseleave\";\r\n      });\r\n    }\r\n\r\n    /* on click event */\r\n    if (pJS.interactivity.events.onclick.enable) {\r\n      pJS.interactivity.el.addEventListener(\"click\", () => {\r\n        pJS.interactivity.mouse.click_pos_x = pJS.interactivity.mouse.pos_x;\r\n        pJS.interactivity.mouse.click_pos_y = pJS.interactivity.mouse.pos_y;\r\n        pJS.interactivity.mouse.click_time = new Date().getTime();\r\n\r\n        if (pJS.interactivity.events.onclick.enable) {\r\n          switch (pJS.interactivity.events.onclick.mode) {\r\n            case \"push\":\r\n              if (pJS.particles.move.enable) {\r\n                pJS.fn.modes.pushParticles(\r\n                  pJS.interactivity.modes.push.particles_nb,\r\n                  pJS.interactivity.mouse\r\n                );\r\n              } else if (pJS.interactivity.modes.push.particles_nb == 1) {\r\n                pJS.fn.modes.pushParticles(\r\n                  pJS.interactivity.modes.push.particles_nb,\r\n                  pJS.interactivity.mouse\r\n                );\r\n              } else if (pJS.interactivity.modes.push.particles_nb > 1) {\r\n                pJS.fn.modes.pushParticles(\r\n                  pJS.interactivity.modes.push.particles_nb\r\n                );\r\n              }\r\n              break;\r\n\r\n            case \"remove\":\r\n              pJS.fn.modes.removeParticles(\r\n                pJS.interactivity.modes.remove.particles_nb\r\n              );\r\n              break;\r\n\r\n            case \"bubble\":\r\n              pJS.tmp.bubble_clicking = true;\r\n              break;\r\n\r\n            case \"repulse\":\r\n              pJS.tmp.repulse_clicking = true;\r\n              pJS.tmp.repulse_count = 0;\r\n              pJS.tmp.repulse_finish = false;\r\n              setTimeout(() => {\r\n                pJS.tmp.repulse_clicking = false;\r\n              }, pJS.interactivity.modes.repulse.duration * 1000);\r\n              break;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  pJS.fn.vendors.densityAutoParticles = function () {\r\n    if (pJS.particles.number.density.enable) {\r\n      /* calc area */\r\n      let area = (pJS.canvas.el.width * pJS.canvas.el.height) / 1000;\r\n      if (pJS.tmp.retina) {\r\n        area /= pJS.canvas.pxratio * 2;\r\n      }\r\n\r\n      /* calc number of particles based on density area */\r\n      const nb_particles =\r\n        (area * pJS.particles.number.value) /\r\n        pJS.particles.number.density.value_area;\r\n\r\n      /* add or remove X particles */\r\n      const missing_particles = pJS.particles.array.length - nb_particles;\r\n      if (missing_particles < 0) {\r\n        pJS.fn.modes.pushParticles(Math.abs(missing_particles));\r\n      } else pJS.fn.modes.removeParticles(missing_particles);\r\n    }\r\n  };\r\n\r\n  pJS.fn.vendors.checkOverlap = function (p1, position) {\r\n    for (let i = 0; i < pJS.particles.array.length; i++) {\r\n      const p2 = pJS.particles.array[i];\r\n\r\n      const dx = p1.x - p2.x;\r\n      const dy = p1.y - p2.y;\r\n      const dist = Math.sqrt(dx * dx + dy * dy);\r\n\r\n      if (dist <= p1.radius + p2.radius) {\r\n        p1.x = position ? position.x : Math.random() * pJS.canvas.w;\r\n        p1.y = position ? position.y : Math.random() * pJS.canvas.h;\r\n        pJS.fn.vendors.checkOverlap(p1);\r\n      }\r\n    }\r\n  };\r\n\r\n  pJS.fn.vendors.createSvgImg = function (p) {\r\n    /* set color to svg element */\r\n    const svgXml = pJS.tmp.source_svg;\r\n    const rgbHex = /#([0-9A-F]{3,6})/gi;\r\n    const coloredSvgXml = svgXml.replace(rgbHex, (m, r, g, b) => {\r\n      if (p.color.rgb) {\r\n        var color_value = `rgba(${p.color.rgb.r},${p.color.rgb.g},${p.color.rgb.b},${p.opacity})`;\r\n      } else {\r\n        var color_value = `hsla(${p.color.hsl.h},${p.color.hsl.s}%,${p.color.hsl.l}%,${p.opacity})`;\r\n      }\r\n      return color_value;\r\n    });\r\n\r\n    /* prepare to create img with colored svg */\r\n    const svg = new Blob([coloredSvgXml], {\r\n      type: \"image/svg+xml;charset=utf-8\",\r\n    });\r\n    const DOMURL = window.URL || window.webkitURL || window;\r\n    const url = DOMURL.createObjectURL(svg);\r\n\r\n    /* create particle img obj */\r\n    const img = new Image();\r\n    img.addEventListener(\"load\", () => {\r\n      p.img.obj = img;\r\n      p.img.loaded = true;\r\n      DOMURL.revokeObjectURL(url);\r\n      pJS.tmp.count_svg++;\r\n    });\r\n    img.src = url;\r\n  };\r\n\r\n  pJS.fn.vendors.destroypJS = function () {\r\n    cancelAnimationFrame(pJS.fn.drawAnimFrame);\r\n    canvas_el.remove();\r\n    pJSDom = null;\r\n  };\r\n\r\n  pJS.fn.vendors.drawShape = function (\r\n    c,\r\n    startX,\r\n    startY,\r\n    sideLength,\r\n    sideCountNumerator,\r\n    sideCountDenominator\r\n  ) {\r\n    // By Programming Thomas - https://programmingthomas.wordpress.com/2013/04/03/n-sided-shapes/\r\n    const sideCount = sideCountNumerator * sideCountDenominator;\r\n    const decimalSides = sideCountNumerator / sideCountDenominator;\r\n    const interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides;\r\n    const interiorAngle = Math.PI - (Math.PI * interiorAngleDegrees) / 180; // convert to radians\r\n    c.save();\r\n    c.beginPath();\r\n    c.translate(startX, startY);\r\n    c.moveTo(0, 0);\r\n    for (let i = 0; i < sideCount; i++) {\r\n      c.lineTo(sideLength, 0);\r\n      c.translate(sideLength, 0);\r\n      c.rotate(interiorAngle);\r\n    }\r\n    // c.stroke();\r\n    c.fill();\r\n    c.restore();\r\n  };\r\n\r\n  pJS.fn.vendors.exportImg = function () {\r\n    window.open(pJS.canvas.el.toDataURL(\"image/png\"), \"_blank\");\r\n  };\r\n\r\n  pJS.fn.vendors.loadImg = function (type) {\r\n    pJS.tmp.img_error = undefined;\r\n\r\n    if (pJS.particles.shape.image.src != \"\") {\r\n      if (type == \"svg\") {\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", pJS.particles.shape.image.src);\r\n        xhr.onreadystatechange = function (data) {\r\n          if (xhr.readyState == 4) {\r\n            if (xhr.status == 200) {\r\n              pJS.tmp.source_svg = data.currentTarget.response;\r\n              pJS.fn.vendors.checkBeforeDraw();\r\n            } else {\r\n              console.log(\"Error pJS - Image not found\");\r\n              pJS.tmp.img_error = true;\r\n            }\r\n          }\r\n        };\r\n        xhr.send();\r\n      } else {\r\n        const img = new Image();\r\n        img.addEventListener(\"load\", () => {\r\n          pJS.tmp.img_obj = img;\r\n          pJS.fn.vendors.checkBeforeDraw();\r\n        });\r\n        img.src = pJS.particles.shape.image.src;\r\n      }\r\n    } else {\r\n      console.log(\"Error pJS - No image.src\");\r\n      pJS.tmp.img_error = true;\r\n    }\r\n  };\r\n\r\n  pJS.fn.vendors.draw = function () {\r\n    if (pJS.particles.shape.type == \"image\") {\r\n      if (pJS.tmp.img_type == \"svg\") {\r\n        if (pJS.tmp.count_svg >= pJS.particles.number.value) {\r\n          pJS.fn.particlesDraw();\r\n          if (!pJS.particles.move.enable) {\r\n            cancelRequestAnimFrame(pJS.fn.drawAnimFrame);\r\n          } else pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);\r\n        } else {\r\n          // console.log('still loading...');\r\n          if (!pJS.tmp.img_error) {\r\n            pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);\r\n          }\r\n        }\r\n      } else if (pJS.tmp.img_obj != undefined) {\r\n        pJS.fn.particlesDraw();\r\n        if (!pJS.particles.move.enable) {\r\n          cancelRequestAnimFrame(pJS.fn.drawAnimFrame);\r\n        } else pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);\r\n      } else if (!pJS.tmp.img_error) {\r\n        pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);\r\n      }\r\n    } else {\r\n      pJS.fn.particlesDraw();\r\n      if (!pJS.particles.move.enable) {\r\n        cancelRequestAnimFrame(pJS.fn.drawAnimFrame);\r\n      } else pJS.fn.drawAnimFrame = requestAnimFrame(pJS.fn.vendors.draw);\r\n    }\r\n  };\r\n\r\n  pJS.fn.vendors.checkBeforeDraw = function () {\r\n    // if shape is image\r\n    if (pJS.particles.shape.type == \"image\") {\r\n      if (pJS.tmp.img_type == \"svg\" && pJS.tmp.source_svg == undefined) {\r\n        pJS.tmp.checkAnimFrame = requestAnimFrame(check);\r\n      } else {\r\n        // console.log('images loaded! cancel check');\r\n        cancelRequestAnimFrame(pJS.tmp.checkAnimFrame);\r\n        if (!pJS.tmp.img_error) {\r\n          pJS.fn.vendors.init();\r\n          pJS.fn.vendors.draw();\r\n        }\r\n      }\r\n    } else {\r\n      pJS.fn.vendors.init();\r\n      pJS.fn.vendors.draw();\r\n    }\r\n  };\r\n\r\n  pJS.fn.vendors.init = function () {\r\n    /* init canvas + particles */\r\n    pJS.fn.retinaInit();\r\n    pJS.fn.canvasInit();\r\n    pJS.fn.canvasSize();\r\n    pJS.fn.canvasPaint();\r\n    pJS.fn.particlesCreate();\r\n    pJS.fn.vendors.densityAutoParticles();\r\n\r\n    /* particles.line_linked - convert hex colors to rgb */\r\n    pJS.particles.line_linked.color_rgb_line = hexToRgb(\r\n      pJS.particles.line_linked.color\r\n    );\r\n  };\r\n\r\n  pJS.fn.vendors.start = function () {\r\n    if (isInArray(\"image\", pJS.particles.shape.type)) {\r\n      pJS.tmp.img_type = pJS.particles.shape.image.src.substr(\r\n        pJS.particles.shape.image.src.length - 3\r\n      );\r\n      pJS.fn.vendors.loadImg(pJS.tmp.img_type);\r\n    } else {\r\n      pJS.fn.vendors.checkBeforeDraw();\r\n    }\r\n  };\r\n\r\n  /* ---------- pJS - start ------------ */\r\n\r\n  pJS.fn.vendors.eventsListeners();\r\n\r\n  pJS.fn.vendors.start();\r\n};\r\n\r\n/* ---------- global functions - vendors ------------ */\r\n\r\nObject.deepExtend = function (destination, source) {\r\n  for (const property in source) {\r\n    if (\r\n      source[property] &&\r\n      source[property].constructor &&\r\n      source[property].constructor === Object\r\n    ) {\r\n      destination[property] = destination[property] || {};\r\n      arguments.callee(destination[property], source[property]);\r\n    } else {\r\n      destination[property] = source[property];\r\n    }\r\n  }\r\n  return destination;\r\n};\r\n\r\nwindow.requestAnimFrame = (function () {\r\n  return (\r\n    window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    function (callback) {\r\n      window.setTimeout(callback, 1000 / 60);\r\n    }\r\n  );\r\n})();\r\n\r\nwindow.cancelRequestAnimFrame = (function () {\r\n  return (\r\n    window.cancelAnimationFrame ||\r\n    window.webkitCancelRequestAnimationFrame ||\r\n    window.mozCancelRequestAnimationFrame ||\r\n    window.oCancelRequestAnimationFrame ||\r\n    window.msCancelRequestAnimationFrame ||\r\n    clearTimeout\r\n  );\r\n})();\r\n\r\nfunction hexToRgb(hex) {\r\n  // By Tim Down - http://stackoverflow.com/a/5624139/3493650\r\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n    : null;\r\n}\r\n\r\nfunction clamp(number, min, max) {\r\n  return Math.min(Math.max(number, min), max);\r\n}\r\n\r\nfunction isInArray(value, array) {\r\n  return array.indexOf(value) > -1;\r\n}\r\n\r\n/* ---------- particles.js functions - start ------------ */\r\n\r\nwindow.pJSDom = [];\r\n\r\nwindow.particlesJS = function (tag_id, params) {\r\n  // console.log(params);\r\n\r\n  /* no string id? so it's object params, and set the id with default id */\r\n  if (typeof tag_id !== \"string\") {\r\n    params = tag_id;\r\n    tag_id = \"particles-js\";\r\n  }\r\n\r\n  /* no id? set the id to default id */\r\n  if (!tag_id) {\r\n    tag_id = \"particles-js\";\r\n  }\r\n\r\n  /* pJS elements */\r\n  const pJS_tag = document.getElementById(tag_id);\r\n  const pJS_canvas_class = \"particles-js-canvas-el\";\r\n  const exist_canvas = pJS_tag.getElementsByClassName(pJS_canvas_class);\r\n\r\n  /* remove canvas if exists into the pJS target tag */\r\n  if (exist_canvas.length) {\r\n    while (exist_canvas.length > 0) {\r\n      pJS_tag.removeChild(exist_canvas[0]);\r\n    }\r\n  }\r\n\r\n  /* create canvas element */\r\n  const canvas_el = document.createElement(\"canvas\");\r\n  canvas_el.className = pJS_canvas_class;\r\n\r\n  /* set size canvas */\r\n  canvas_el.style.width = \"100%\";\r\n  canvas_el.style.height = \"100%\";\r\n\r\n  /* append canvas */\r\n  const canvas = document.getElementById(tag_id).appendChild(canvas_el);\r\n\r\n  /* launch particle.js */\r\n  if (canvas != null) {\r\n    pJSDom.push(new pJS(tag_id, params));\r\n  }\r\n};\r\n\r\nwindow.particlesJS.load = function (tag_id, path_config_json, callback) {\r\n  /* load json config */\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\"GET\", path_config_json);\r\n  xhr.onreadystatechange = function (data) {\r\n    if (xhr.readyState == 4) {\r\n      if (xhr.status == 200) {\r\n        const params = JSON.parse(data.currentTarget.response);\r\n        window.particlesJS(tag_id, params);\r\n        if (callback) callback();\r\n      } else {\r\n        console.log(`Error pJS - XMLHttpRequest status: ${xhr.status}`);\r\n        console.log(\"Error pJS - File config not found\");\r\n      }\r\n    }\r\n  };\r\n  xhr.send();\r\n};\r\n\n\n//# sourceURL=webpack://Leaderboard-App/./src/particles.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/particles.js"]();
/******/ 	
/******/ })()
;